
        // This code is automatically generated by Azle

        thread_local! {
            static IC: std::cell::RefCell<boa::object::JsObject> = std::cell::RefCell::new(boa::object::JsObject::default());
        }

        fn custom_getrandom(_buf: &mut [u8]) -> Result<(), getrandom::Error> { Ok(()) }

        getrandom::register_custom_getrandom!(custom_getrandom);
        
        
        #[ic_cdk_macros::query]
        fn balance(address: String) -> i32 {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                ic_cdk::println!("ic: {:#?}", ic);
                
                let mut context = boa::Context::new();

                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );
            
                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        balance(\"{address}\");
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    address = address
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                ic_cdk::println!("return_value: {:#?}", return_value);
    
                return_value.as_number().unwrap().to_string().parse::<i32>().unwrap()
            })
        }
    

        #[ic_cdk_macros::query]
        fn ticker() -> String {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                ic_cdk::println!("ic: {:#?}", ic);
                
                let mut context = boa::Context::new();

                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );
            
                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        ticker();
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                ic_cdk::println!("return_value: {:#?}", return_value);
    
                return_value.as_string().unwrap().to_string()
            })
        }
    

        #[ic_cdk_macros::query]
        fn name() -> String {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                ic_cdk::println!("ic: {:#?}", ic);
                
                let mut context = boa::Context::new();

                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );
            
                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        name();
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                ic_cdk::println!("return_value: {:#?}", return_value);
    
                return_value.as_string().unwrap().to_string()
            })
        }
    

        #[ic_cdk_macros::query]
        fn totalSupply() -> i32 {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                ic_cdk::println!("ic: {:#?}", ic);
                
                let mut context = boa::Context::new();

                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );
            
                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        totalSupply();
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                ic_cdk::println!("return_value: {:#?}", return_value);
    
                return_value.as_number().unwrap().to_string().parse::<i32>().unwrap()
            })
        }
    

        
        #[ic_cdk_macros::update]
        fn initializeSupply(ticker: String, name: String, totalSupply: i32, originalAddress: String) -> bool {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                let mut context = boa::Context::new();
            
                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );

                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        initializeSupply(\"{ticker}\",\"{name}\",{totalSupply},\"{originalAddress}\");
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    ticker = ticker,name = name,totalSupply = totalSupply,originalAddress = originalAddress
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                let ic = context
                    .global_object()
                    .get(
                        "ic",
                        &mut context
                    )
                    .unwrap()
                    .as_object()
                    .unwrap()
                    .clone();
    
                ic_cdk::println!("ic: {:#?}", ic);
    
                ic_ref_cell.replace(ic);
    
                return_value.to_boolean()
            })
        }
    

        #[ic_cdk_macros::update]
        fn transfer(from: String, to: String, amount: i32) -> bool {
            IC.with(|ic_ref_cell| {
                let ic = ic_ref_cell.borrow().clone();

                let mut context = boa::Context::new();
            
                context.register_global_property(
                    "ic",
                    ic,
                    boa::property::Attribute::all()
                );

                let return_value = context.eval(format!(
                    "
                        {compiled_js}
    
                        transfer(\"{from}\",\"{to}\",{amount});
                    ",
                    compiled_js = r#""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.name = exports.ticker = exports.balance = exports.transfer = exports.initializeSupply = void 0;
function initializeSupply(ticker, name, totalSupply, originalAddress) {
    var _a;
    ic.ERC20 = {
        accounts: (_a = {},
            _a[originalAddress] = {
                address: originalAddress,
                balance: totalSupply
            },
            _a),
        ticker: ticker,
        name: name,
        totalSupply: totalSupply
    };
    return true;
}
exports.initializeSupply = initializeSupply;
function transfer(from, to, amount) {
    if (ic.ERC20.accounts[to] === undefined) {
        ic.ERC20.accounts[to] = {
            address: to,
            balance: 0
        };
    }
    ic.ERC20.accounts[from].balance -= amount;
    ic.ERC20.accounts[to].balance += amount;
    return true;
}
exports.transfer = transfer;
function balance(address) {
    return ic.ERC20.accounts[address].balance;
}
exports.balance = balance;
function ticker() {
    return ic.ERC20.ticker;
}
exports.ticker = ticker;
function name() {
    return ic.ERC20.name;
}
exports.name = name;
function totalSupply() {
    return ic.ERC20.totalSupply;
}
exports.totalSupply = totalSupply;
// export function set(key: string, value: string): Update<boolean> {
//     ic[key] = value;
//     return true;
// }
// export function get(key: string): Query<string> {
//     return ic[key];
// }
"#,
                    from = from,to = to,amount = amount
                ).replace("Object.defineProperty", "let exports = {}; Object.defineProperty")).unwrap();
            
                let ic = context
                    .global_object()
                    .get(
                        "ic",
                        &mut context
                    )
                    .unwrap()
                    .as_object()
                    .unwrap()
                    .clone();
    
                ic_cdk::println!("ic: {:#?}", ic);
    
                ic_ref_cell.replace(ic);
    
                return_value.to_boolean()
            })
        }
    
    