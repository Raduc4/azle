import * as fs from 'fs';
import { execSync } from 'child_process';

app();

type DfxJson = Readonly<{
    canisters: Readonly<{
        [key: string]: JSCanisterConfig;
    }>;
}>;

type JSCanisterConfig = Readonly<{
    type: 'custom';
    build: string;
    root: string;
    js: string;
    candid: string;
    wasm: string;
}>;

function app() {
    const canisterName = process.argv[2];
    const dfxJson: DfxJson = JSON.parse(fs.readFileSync('dfx.json').toString());
    const canisterConfig = dfxJson.canisters[canisterName];

    const rootPath = canisterConfig.root;
    const jsPath = canisterConfig.js;
    const candidPath = canisterConfig.candid;

    createRustCode(
        canisterName,
        rootPath,
        jsPath,
        candidPath
    );

    compileRustCode(canisterName);
}

function createRustCode(
    canisterName: string,
    rootPath: string,
    jsPath: string,
    candidPath: string
) {
    createCargoTomls(
        canisterName,
        rootPath
    );

    createLibRs(
        rootPath,
        jsPath
    );
}

function createCargoTomls(
    canisterName: string,
    rootPath: string
) {
    fs.writeFileSync('./Cargo.toml', `
        # This code is automatically generated by Azle

        [workspace]
        members = [
            "${rootPath}"
        ]

        [profile.release]
        lto = true
        opt-level = 'z'
    `);

    fs.writeFileSync(`${rootPath}/Cargo.toml`, `
        # This code is automatically generated by Azle

        [package]
        name = "${canisterName}"
        version = "0.0.0"
        edition = "2018"

        [lib]
        crate-type = ["cdylib"]

        [dependencies]
        ic-cdk = "0.3.2"
        ic-cdk-macros = "0.3.2"
        # Boa = { version = "0.13.0", features = [] }
        # Boa = { path = "../../../boa/boa", default-features = false }
        # Boa = { path = "../../../boa/boa", features = [] }
        Boa = { path = "../../../../../boa/boa" }
        getrandom = { version = "0.2.3", features = ["custom"] }
    `);
}

function createLibRs(
    rootPath: string,
    jsPath: string
) {
    if (!fs.existsSync(`${rootPath}/src`)) {
        fs.mkdirSync(`${rootPath}/src`);
    }

    const js = fs.readFileSync(jsPath);

    fs.writeFileSync(`${rootPath}/src/lib.rs`, `
        // This code is automatically generated by Azle

        fn custom_getrandom(_buf: &mut [u8]) -> Result<(), getrandom::Error> { Ok(()) }

        getrandom::register_custom_getrandom!(custom_getrandom);
        
        #[ic_cdk_macros::query]
        fn execute_js() {
            let mut context = boa::Context::new();
        
            let value = context.eval("${js}").unwrap();
        
            ic_cdk::println!("value: {:#?}", value);
        }
    `);
}

function compileRustCode(canisterName: string) {
    execSync(
        `cargo build --target wasm32-unknown-unknown --package ${canisterName} --release`,
        { stdio: 'inherit' }
    );

    // optimization, binary is too big to deploy without this
    execSync(
        `cargo install ic-cdk-optimizer --root target`,
        { stdio: 'inherit' }
    );
    execSync(
        `./target/bin/ic-cdk-optimizer ./target/wasm32-unknown-unknown/release/${canisterName}.wasm -o ./target/wasm32-unknown-unknown/release/${canisterName}-optimized.wasm`,
        { stdio: 'inherit' }
    );
}